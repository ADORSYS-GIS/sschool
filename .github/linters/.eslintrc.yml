---
# Global settings
parserOptions:
  project: true
plugins:
  - scss
  - '@typescript-eslint'
extends:
  - 'next/core-web-vitals'
  - "plugin:scss/recommended"

# Override settings for TypeScript files
overrides:
  - files: ['*.ts', '*.tsx']
    parser: '@typescript-eslint/parser'
    extends:
      - 'plugin:@typescript-eslint/recommended-type-checked'
      - 'plugin:@typescript-eslint/stylistic-type-checked'
    rules:
      '@typescript-eslint/array-type': off
      '@typescript-eslint/consistent-type-definitions': off
      '@typescript-eslint/consistent-type-imports':
        - warn
        - prefer: type-imports
          fixStyle: inline-type-imports
      '@typescript-eslint/no-unused-vars':
        - warn
        - argsIgnorePattern: '^_'
      '@typescript-eslint/require-await': off
      '@typescript-eslint/no-misused-promises':
        - warn
        - checksVoidReturn:
            attributes: false
      '@typescript-eslint/no-explicit-any': off
      '@typescript-eslint/no-unsafe-assignment': off

# Override settings for JavaScript files
  - files: ['*.js', '*.jsx']
    rules:
      # Add JavaScript-specific rules here
      # For example:
      'no-unused-vars': 'warn'
      # 'no-undef': 'error'
      # 'semi': ['error', 'always']
      # 'comma-dangle': ['warn', 'never']

# Common rules for both TypeScript and JavaScript files
rules:
  semi:
    - error
    - always
  comma-dangle:
    - warn
    - always
  no-extra-semi: off
  react/react-in-jsx-scope: off
  scss/at-rule-no-unknown: 
    - error
    - ignoreAtRules:
        - apply
        - plugin


settings:
  import/resolver:
    typescript:
      project: ../../tsconfig.json
